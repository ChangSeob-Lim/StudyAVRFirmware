
PortTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025a  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	49 c0       	rjmp	.+146    	; 0x12e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 #include <util/delay.h>

 int main()
 {
	unsigned char LED_Data = 0x01, i;
	DDRC = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20

 #include <avr/io.h>
 #include <util/delay.h>

 int main()
 {
  a2:	97 e0       	ldi	r25, 0x07	; 7
	unsigned char LED_Data = 0x01, i;
	DDRC = 0xFF;

	while(1)
	{
		LED_Data = 0x01;
  a4:	81 e0       	ldi	r24, 0x01	; 1
		// 왼쪽으로 이동
		for(i=0; i<7; i++)
		{
			PORTC = LED_Data;
  a6:	85 bb       	out	0x15, r24	; 21
			LED_Data <<= 1;
  a8:	88 0f       	add	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	3f e3       	ldi	r19, 0x3F	; 63
  ae:	4b e0       	ldi	r20, 0x0B	; 11
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	40 40       	sbci	r20, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x12>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x1c>
  ba:	00 00       	nop
  bc:	91 50       	subi	r25, 0x01	; 1

	while(1)
	{
		LED_Data = 0x01;
		// 왼쪽으로 이동
		for(i=0; i<7; i++)
  be:	99 f7       	brne	.-26     	; 0xa6 <main+0x8>
  c0:	97 e0       	ldi	r25, 0x07	; 7
			_delay_ms(500);
		}
		// 오른쪽으로 이동
		for(i=0; i<7; i++)
		{
			PORTC = LED_Data;
  c2:	85 bb       	out	0x15, r24	; 21
			LED_Data >>= 1;
  c4:	86 95       	lsr	r24
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	3f e3       	ldi	r19, 0x3F	; 63
  ca:	4b e0       	ldi	r20, 0x0B	; 11
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x38>
  d6:	00 00       	nop
  d8:	91 50       	subi	r25, 0x01	; 1
			PORTC = LED_Data;
			LED_Data <<= 1;
			_delay_ms(500);
		}
		// 오른쪽으로 이동
		for(i=0; i<7; i++)
  da:	99 f7       	brne	.-26     	; 0xc2 <main+0x24>
			LED_Data >>= 1;
			_delay_ms(500);
		}

		LED_Data = 0x00;
		PORTC = LED_Data;
  dc:	15 ba       	out	0x15, r1	; 21
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	9f e7       	ldi	r25, 0x7F	; 127
  e2:	26 e1       	ldi	r18, 0x16	; 22
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	20 40       	sbci	r18, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x46>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x50>
  ee:	00 00       	nop
  f0:	98 e0       	ldi	r25, 0x08	; 8
			PORTC = LED_Data;
			LED_Data >>= 1;
			_delay_ms(500);
		}

		LED_Data = 0x00;
  f2:	80 e0       	ldi	r24, 0x00	; 0
		PORTC = LED_Data;
		_delay_ms(1000);
		
		for(i=0; i<8; i++)
		{
			LED_Data = (LED_Data << 1) + 1;
  f4:	88 0f       	add	r24, r24
  f6:	8f 5f       	subi	r24, 0xFF	; 255
			PORTC = LED_Data;
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	4f e3       	ldi	r20, 0x3F	; 63
  fe:	2b e0       	ldi	r18, 0x0B	; 11
 100:	31 50       	subi	r19, 0x01	; 1
 102:	40 40       	sbci	r20, 0x00	; 0
 104:	20 40       	sbci	r18, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x62>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x6c>
 10a:	00 00       	nop
 10c:	91 50       	subi	r25, 0x01	; 1

		LED_Data = 0x00;
		PORTC = LED_Data;
		_delay_ms(1000);
		
		for(i=0; i<8; i++)
 10e:	91 f7       	brne	.-28     	; 0xf4 <main+0x56>
 110:	98 e0       	ldi	r25, 0x08	; 8
			_delay_ms(500);
		}
		
		for(i=0; i<8; i++)
		{
			LED_Data = LED_Data << 1;
 112:	88 0f       	add	r24, r24
			PORTC = LED_Data;
 114:	85 bb       	out	0x15, r24	; 21
 116:	3f ef       	ldi	r19, 0xFF	; 255
 118:	4f e3       	ldi	r20, 0x3F	; 63
 11a:	2b e0       	ldi	r18, 0x0B	; 11
 11c:	31 50       	subi	r19, 0x01	; 1
 11e:	40 40       	sbci	r20, 0x00	; 0
 120:	20 40       	sbci	r18, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x7e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x88>
 126:	00 00       	nop
 128:	91 50       	subi	r25, 0x01	; 1
			LED_Data = (LED_Data << 1) + 1;
			PORTC = LED_Data;
			_delay_ms(500);
		}
		
		for(i=0; i<8; i++)
 12a:	99 f7       	brne	.-26     	; 0x112 <main+0x74>
 12c:	ba cf       	rjmp	.-140    	; 0xa2 <main+0x4>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
